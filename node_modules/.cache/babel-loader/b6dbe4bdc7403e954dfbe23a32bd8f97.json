{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\n// Define the initial state using that type\nconst initialState = {\n  value: 0\n};\nexport const counterSlice = createSlice({\n  name: \"counter\",\n  // `createSlice` will infer the state type from the `initialState` argument\n  initialState,\n  reducers: {\n    increment: state => {\n      state.value += 1;\n    },\n    decrement: state => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    }\n  }\n});\nexport const {\n  increment,\n  decrement,\n  incrementByAmount\n} = counterSlice.actions; // Other code such as selectors can use the imported `RootState` type\n\nexport const selectCount = state => state.counter.value;\nexport default counterSlice.reducer;","map":{"version":3,"sources":["/Users/renwanjun/Documents/工作/WebProjects/BasicKnowledge/React & Vue/demoes/react-antd-ts/src/reducers/counter.ts"],"names":["createSlice","initialState","value","counterSlice","name","reducers","increment","state","decrement","incrementByAmount","action","payload","actions","selectCount","counter","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA2C,kBAA3C;AAQA;AACA,MAAMC,YAA0B,GAAG;AACjCC,EAAAA,KAAK,EAAE;AAD0B,CAAnC;AAIA,OAAO,MAAMC,YAAY,GAAGH,WAAW,CAAC;AACtCI,EAAAA,IAAI,EAAE,SADgC;AAEtC;AACAH,EAAAA,YAHsC;AAItCI,EAAAA,QAAQ,EAAE;AACRC,IAAAA,SAAS,EAAEC,KAAK,IAAI;AAClBA,MAAAA,KAAK,CAACL,KAAN,IAAe,CAAf;AACD,KAHO;AAIRM,IAAAA,SAAS,EAAED,KAAK,IAAI;AAClBA,MAAAA,KAAK,CAACL,KAAN,IAAe,CAAf;AACD,KANO;AAOR;AACAO,IAAAA,iBAAiB,EAAE,CAACF,KAAD,EAAQG,MAAR,KAA0C;AAC3DH,MAAAA,KAAK,CAACL,KAAN,IAAeQ,MAAM,CAACC,OAAtB;AACD;AAVO;AAJ4B,CAAD,CAAhC;AAkBP,OAAO,MAAM;AAAEL,EAAAA,SAAF;AAAaE,EAAAA,SAAb;AAAwBC,EAAAA;AAAxB,IAA8CN,YAAY,CAACS,OAAjE,C,CAEP;;AACA,OAAO,MAAMC,WAAW,GAAIN,KAAD,IAAsBA,KAAK,CAACO,OAAN,CAAcZ,KAAxD;AAEP,eAAeC,YAAY,CAACY,OAA5B","sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport type { RootState } from \"@/store\";\n\n// Define a type for the slice state\ninterface CounterState {\n  value: number;\n}\n\n// Define the initial state using that type\nconst initialState: CounterState = {\n  value: 0,\n};\n\nexport const counterSlice = createSlice({\n  name: \"counter\",\n  // `createSlice` will infer the state type from the `initialState` argument\n  initialState,\n  reducers: {\n    increment: state => {\n      state.value += 1;\n    },\n    decrement: state => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action: PayloadAction<number>) => {\n      state.value += action.payload;\n    },\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// Other code such as selectors can use the imported `RootState` type\nexport const selectCount = (state: RootState) => state.counter.value;\n\nexport default counterSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}