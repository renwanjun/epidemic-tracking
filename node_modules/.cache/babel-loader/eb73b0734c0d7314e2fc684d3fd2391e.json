{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { login as loginService, register as registerService, getUser as getUserService } from \"@/services/user\";\nimport { message } from \"antd\";\nconst NAMESPACE = \"login\";\nconst initialState = {\n  token: \"\",\n  user: {},\n  isLogin: false\n};\nexport const login = createAsyncThunk(`${NAMESPACE}/login`, async (params, state) => {\n  console.log(state);\n  const response = await loginService(params);\n  return response;\n});\nexport const register = createAsyncThunk(`${NAMESPACE}/register`, async params => {\n  const response = await registerService(params);\n  return response;\n});\nexport const getUser = createAsyncThunk(`${NAMESPACE}/user`, async function (params) {\n  const response = await getUserService();\n  return response;\n});\nconst usersSlice = createSlice({\n  name: NAMESPACE,\n  initialState,\n  reducers: {\n    overrideStateProps(state, {\n      payload\n    }) {\n      return { ...state,\n        ...payload\n      };\n    },\n\n    clearToken(state) {\n      localStorage.removeItem(\"token\");\n      state.token = \"\";\n      state.isLogin = \"\";\n    } // getUser: state => {\n    //   state.username = \"admin\";\n    // },\n    // login: (\n    //   state,\n    //   action: PayloadAction<{ name: string; password: string }>\n    // ) => {\n    //   // state.token = \"sdadsadasdasdsa\";\n    //   localStorage.setItem(\"token\", \"\");\n    // },\n    // register: () => {},\n\n\n  },\n\n  // 处理异步请求结果的reducer\n  extraReducers(builder) {\n    builder.addCase(login.pending, (state, action) => {// state.status = 'loading'\n    }).addCase(login.fulfilled, (state, action) => {\n      const {\n        payload\n      } = action; // console.log(action);\n\n      const {\n        status,\n        data\n      } = payload;\n\n      if (status == 200) {\n        message.success(\"登录成功\");\n        Object.assign(state, data);\n        localStorage.setItem(\"token\", state.token);\n        state.isLogin = true;\n      } else {\n        message.error(\"error\");\n      }\n    }).addCase(login.rejected, (state, action) => {// state.status = 'failed'\n      // state.error = action.error.message\n    }).addCase(register.fulfilled, (state, action) => {});\n  }\n\n}); // export const { login, register } = usersSlice.actions;\n\nexport const {\n  overrideStateProps\n} = usersSlice.actions;\nexport const selectUsername = state => state[NAMESPACE].user.username;\nexport default usersSlice.reducer;","map":{"version":3,"sources":["/Users/renwanjun/Documents/工作/WebProjects/BasicKnowledge/React & Vue/demoes/react-antd-ts/src/reducers/login.ts"],"names":["createSlice","createAsyncThunk","login","loginService","register","registerService","getUser","getUserService","message","NAMESPACE","initialState","token","user","isLogin","params","state","console","log","response","usersSlice","name","reducers","overrideStateProps","payload","clearToken","localStorage","removeItem","extraReducers","builder","addCase","pending","action","fulfilled","status","data","success","Object","assign","setItem","error","rejected","actions","selectUsername","username","reducer"],"mappings":"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","sourcesContent":["import { createSlice, PayloadAction, createAsyncThunk } from \"@reduxjs/toolkit\";\n\nimport {\n  login as loginService,\n  register as registerService,\n  getUser as getUserService,\n} from \"@/services/user\";\nimport { User } from \"@/interfaces/user\";\nimport { message } from \"antd\";\n\nconst NAMESPACE = \"login\";\nconst initialState = {\n  token: \"\",\n  user: {},\n  isLogin: false,\n};\n\nexport const login = createAsyncThunk(\n  `${NAMESPACE}/login`,\n  async (params: User, state) => {\n    console.log(state);\n    const response = await loginService(params);\n    return response;\n  }\n);\n\nexport const register = createAsyncThunk(\n  `${NAMESPACE}/register`,\n  async (params: User) => {\n    const response = await registerService(params);\n    return response;\n  }\n);\n\nexport const getUser = createAsyncThunk(\n  `${NAMESPACE}/user`,\n  async function (params) {\n    const response = await getUserService();\n    return response;\n  }\n);\nconst usersSlice = createSlice({\n  name: NAMESPACE,\n  initialState,\n  reducers: {\n    overrideStateProps(state, { payload }: PayloadAction<User>) {\n      return {\n        ...state,\n        ...payload,\n      };\n    },\n    clearToken(state) {\n      localStorage.removeItem(\"token\");\n      state.token = \"\";\n      state.isLogin = \"\";\n    },\n    // getUser: state => {\n    //   state.username = \"admin\";\n    // },\n    // login: (\n    //   state,\n    //   action: PayloadAction<{ name: string; password: string }>\n    // ) => {\n    //   // state.token = \"sdadsadasdasdsa\";\n    //   localStorage.setItem(\"token\", \"\");\n    // },\n    // register: () => {},\n  },\n  // 处理异步请求结果的reducer\n  extraReducers(builder) {\n    builder\n      .addCase(login.pending, (state, action) => {\n        // state.status = 'loading'\n      })\n      .addCase(login.fulfilled, (state, action) => {\n        const { payload } = action;\n        // console.log(action);\n        const { status, data } = payload;\n        if (status == 200) {\n          message.success(\"登录成功\");\n          Object.assign(state, data);\n          localStorage.setItem(\"token\", state.token);\n          state.isLogin = true;\n        } else {\n          message.error(\"error\");\n        }\n      })\n      .addCase(login.rejected, (state, action) => {\n        // state.status = 'failed'\n        // state.error = action.error.message\n      })\n      .addCase(register.fulfilled, (state, action) => {});\n  },\n});\n\n// export const { login, register } = usersSlice.actions;\nexport const { overrideStateProps } = usersSlice.actions;\nexport const selectUsername = (state: any) => state[NAMESPACE].user.username;\nexport default usersSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}