{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { login as loginService } from \"@/services/login\";\nimport { message } from \"antd\";\nconst NAMESPACE = \"login\";\nconst initialState = {\n  username: \"\",\n  password: \"\"\n};\nexport const login = createAsyncThunk(`${NAMESPACE}/login`, async state => {\n  // console.log(state);\n  const response = await loginService({\n    username: \"\",\n    password: \"\"\n  }); // console.log(response);\n\n  return response;\n});\nconst usersSlice = createSlice({\n  name: NAMESPACE,\n  initialState,\n  reducers: {\n    overrideStateProps(state, {\n      payload\n    }) {\n      return { ...state,\n        ...payload\n      };\n    } // getUser: state => {\n    //   state.username = \"admin\";\n    // },\n    // login: (\n    //   state,\n    //   action: PayloadAction<{ name: string; password: string }>\n    // ) => {\n    //   // state.token = \"sdadsadasdasdsa\";\n    //   localStorage.setItem(\"token\", \"\");\n    // },\n    // register: () => {},\n\n\n  },\n\n  // 处理异步请求结果的reducer\n  extraReducers(builder) {\n    builder.addCase(login.pending, (state, action) => {// state.status = 'loading'\n    }).addCase(login.fulfilled, (state, action) => {\n      const {\n        payload\n      } = action;\n      console.log(payload); // state.status = 'succeeded'\n      // // Add any fetched posts to the array\n      // state.posts = state.posts.concat(action.payload)\n\n      message.info(\"sdsd\");\n    }).addCase(login.rejected, (state, action) => {// state.status = 'failed'\n      // state.error = action.error.message\n    });\n  }\n\n}); // export const { login, register } = usersSlice.actions;\n\nexport const {\n  overrideStateProps\n} = usersSlice.actions;\nexport default usersSlice.reducer;","map":{"version":3,"sources":["/Users/renwanjun/Documents/工作/WebProjects/BasicKnowledge/React & Vue/demoes/react-antd-ts/src/reducers/login.ts"],"names":["createSlice","createAsyncThunk","login","loginService","message","NAMESPACE","initialState","username","password","state","response","usersSlice","name","reducers","overrideStateProps","payload","extraReducers","builder","addCase","pending","action","fulfilled","console","log","info","rejected","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,EAAqCC,gBAArC,QAA6D,kBAA7D;AACA,SACEC,KAAK,IAAIC,YADX,QAGO,kBAHP;AAKA,SAASC,OAAT,QAAwB,MAAxB;AACA,MAAMC,SAAS,GAAG,OAAlB;AACA,MAAMC,YAAkB,GAAG;AACzBC,EAAAA,QAAQ,EAAE,EADe;AAEzBC,EAAAA,QAAQ,EAAE;AAFe,CAA3B;AAKA,OAAO,MAAMN,KAAK,GAAGD,gBAAgB,CAAE,GAAEI,SAAU,QAAd,EAAuB,MAAMI,KAAN,IAAe;AACzE;AACA,QAAMC,QAAQ,GAAG,MAAMP,YAAY,CAAC;AAAEI,IAAAA,QAAQ,EAAE,EAAZ;AAAgBC,IAAAA,QAAQ,EAAE;AAA1B,GAAD,CAAnC,CAFyE,CAGzE;;AACA,SAAOE,QAAP;AACD,CALoC,CAA9B;AAOP,MAAMC,UAAU,GAAGX,WAAW,CAAC;AAC7BY,EAAAA,IAAI,EAAEP,SADuB;AAE7BC,EAAAA,YAF6B;AAG7BO,EAAAA,QAAQ,EAAE;AACRC,IAAAA,kBAAkB,CAACL,KAAD,EAAQ;AAAEM,MAAAA;AAAF,KAAR,EAA0C;AAC1D,aAAO,EACL,GAAGN,KADE;AAEL,WAAGM;AAFE,OAAP;AAID,KANO,CAOR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAjBQ,GAHmB;;AAsB7B;AACAC,EAAAA,aAAa,CAACC,OAAD,EAAU;AACrBA,IAAAA,OAAO,CACJC,OADH,CACWhB,KAAK,CAACiB,OADjB,EAC0B,CAACV,KAAD,EAAQW,MAAR,KAAmB,CACzC;AACD,KAHH,EAIGF,OAJH,CAIWhB,KAAK,CAACmB,SAJjB,EAI4B,CAACZ,KAAD,EAAQW,MAAR,KAAmB;AAC3C,YAAM;AAAEL,QAAAA;AAAF,UAAcK,MAApB;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAYR,OAAZ,EAF2C,CAG3C;AACA;AACA;;AACAX,MAAAA,OAAO,CAACoB,IAAR,CAAa,MAAb;AACD,KAXH,EAYGN,OAZH,CAYWhB,KAAK,CAACuB,QAZjB,EAY2B,CAAChB,KAAD,EAAQW,MAAR,KAAmB,CAC1C;AACA;AACD,KAfH;AAgBD;;AAxC4B,CAAD,CAA9B,C,CA2CA;;AACA,OAAO,MAAM;AAAEN,EAAAA;AAAF,IAAyBH,UAAU,CAACe,OAA1C;AACP,eAAef,UAAU,CAACgB,OAA1B","sourcesContent":["import { createSlice, PayloadAction, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport {\n  login as loginService,\n  register as registerService,\n} from \"@/services/login\";\nimport { User } from \"@/interfaces/login\";\nimport { message } from \"antd\";\nconst NAMESPACE = \"login\";\nconst initialState: User = {\n  username: \"\",\n  password: \"\",\n};\n\nexport const login = createAsyncThunk(`${NAMESPACE}/login`, async state => {\n  // console.log(state);\n  const response = await loginService({ username: \"\", password: \"\" });\n  // console.log(response);\n  return response;\n});\n\nconst usersSlice = createSlice({\n  name: NAMESPACE,\n  initialState,\n  reducers: {\n    overrideStateProps(state, { payload }: PayloadAction<User>) {\n      return {\n        ...state,\n        ...payload,\n      };\n    },\n    // getUser: state => {\n    //   state.username = \"admin\";\n    // },\n    // login: (\n    //   state,\n    //   action: PayloadAction<{ name: string; password: string }>\n    // ) => {\n    //   // state.token = \"sdadsadasdasdsa\";\n    //   localStorage.setItem(\"token\", \"\");\n    // },\n    // register: () => {},\n  },\n  // 处理异步请求结果的reducer\n  extraReducers(builder) {\n    builder\n      .addCase(login.pending, (state, action) => {\n        // state.status = 'loading'\n      })\n      .addCase(login.fulfilled, (state, action) => {\n        const { payload } = action;\n        console.log(payload);\n        // state.status = 'succeeded'\n        // // Add any fetched posts to the array\n        // state.posts = state.posts.concat(action.payload)\n        message.info(\"sdsd\");\n      })\n      .addCase(login.rejected, (state, action) => {\n        // state.status = 'failed'\n        // state.error = action.error.message\n      });\n  },\n});\n\n// export const { login, register } = usersSlice.actions;\nexport const { overrideStateProps } = usersSlice.actions;\nexport default usersSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}