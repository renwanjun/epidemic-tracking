{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { login as loginService, register as registerService } from \"@/services/login\";\nimport { message } from \"antd\";\nconst NAMESPACE = \"login\";\nconst initialState = {\n  username: \"\",\n  password: \"\"\n};\nexport const login = createAsyncThunk(`${NAMESPACE}/login`, async params => {\n  console.log(params);\n  const response = await loginService(params); // console.log(response);\n\n  return response;\n});\nexport const register = createAsyncThunk(`${NAMESPACE}/register`, async params => {\n  const response = await registerService(params);\n  return response;\n});\nconst usersSlice = createSlice({\n  name: NAMESPACE,\n  initialState,\n  reducers: {\n    overrideStateProps(state, {\n      payload\n    }) {\n      return { ...state,\n        ...payload\n      };\n    } // getUser: state => {\n    //   state.username = \"admin\";\n    // },\n    // login: (\n    //   state,\n    //   action: PayloadAction<{ name: string; password: string }>\n    // ) => {\n    //   // state.token = \"sdadsadasdasdsa\";\n    //   localStorage.setItem(\"token\", \"\");\n    // },\n    // register: () => {},\n\n\n  },\n\n  // 处理异步请求结果的reducer\n  extraReducers(builder) {\n    builder.addCase(login.pending, (state, action) => {// state.status = 'loading'\n    }).addCase(login.fulfilled, (state, action) => {\n      const {\n        payload\n      } = action;\n      console.log(payload); // state.status = 'succeeded'\n      // // Add any fetched posts to the array\n      // state.posts = state.posts.concat(action.payload)\n\n      message.info(\"登录成功\");\n    }).addCase(login.rejected, (state, action) => {// state.status = 'failed'\n      // state.error = action.error.message\n    }).addCase(register.fulfilled, (state, action) => {});\n  }\n\n}); // export const { login, register } = usersSlice.actions;\n\nexport const {\n  overrideStateProps\n} = usersSlice.actions;\nexport default usersSlice.reducer;","map":{"version":3,"sources":["/Users/renwanjun/Documents/工作/WebProjects/BasicKnowledge/React & Vue/demoes/react-antd-ts/src/reducers/login.ts"],"names":["createSlice","createAsyncThunk","login","loginService","register","registerService","message","NAMESPACE","initialState","username","password","params","console","log","response","usersSlice","name","reducers","overrideStateProps","state","payload","extraReducers","builder","addCase","pending","action","fulfilled","info","rejected","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,EAAqCC,gBAArC,QAA6D,kBAA7D;AACA,SACEC,KAAK,IAAIC,YADX,EAEEC,QAAQ,IAAIC,eAFd,QAGO,kBAHP;AAKA,SAASC,OAAT,QAAwB,MAAxB;AACA,MAAMC,SAAS,GAAG,OAAlB;AACA,MAAMC,YAAkB,GAAG;AACzBC,EAAAA,QAAQ,EAAE,EADe;AAEzBC,EAAAA,QAAQ,EAAE;AAFe,CAA3B;AAKA,OAAO,MAAMR,KAAK,GAAGD,gBAAgB,CAClC,GAAEM,SAAU,QADsB,EAEnC,MAAOI,MAAP,IAAwB;AACtBC,EAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACA,QAAMG,QAAQ,GAAG,MAAMX,YAAY,CAACQ,MAAD,CAAnC,CAFsB,CAGtB;;AACA,SAAOG,QAAP;AACD,CAPkC,CAA9B;AAUP,OAAO,MAAMV,QAAQ,GAAGH,gBAAgB,CACrC,GAAEM,SAAU,WADyB,EAEtC,MAAOI,MAAP,IAAwB;AACtB,QAAMG,QAAQ,GAAG,MAAMT,eAAe,CAACM,MAAD,CAAtC;AACA,SAAOG,QAAP;AACD,CALqC,CAAjC;AAOP,MAAMC,UAAU,GAAGf,WAAW,CAAC;AAC7BgB,EAAAA,IAAI,EAAET,SADuB;AAE7BC,EAAAA,YAF6B;AAG7BS,EAAAA,QAAQ,EAAE;AACRC,IAAAA,kBAAkB,CAACC,KAAD,EAAQ;AAAEC,MAAAA;AAAF,KAAR,EAA0C;AAC1D,aAAO,EACL,GAAGD,KADE;AAEL,WAAGC;AAFE,OAAP;AAID,KANO,CAOR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAjBQ,GAHmB;;AAsB7B;AACAC,EAAAA,aAAa,CAACC,OAAD,EAAU;AACrBA,IAAAA,OAAO,CACJC,OADH,CACWrB,KAAK,CAACsB,OADjB,EAC0B,CAACL,KAAD,EAAQM,MAAR,KAAmB,CACzC;AACD,KAHH,EAIGF,OAJH,CAIWrB,KAAK,CAACwB,SAJjB,EAI4B,CAACP,KAAD,EAAQM,MAAR,KAAmB;AAC3C,YAAM;AAAEL,QAAAA;AAAF,UAAcK,MAApB;AACAb,MAAAA,OAAO,CAACC,GAAR,CAAYO,OAAZ,EAF2C,CAG3C;AACA;AACA;;AACAd,MAAAA,OAAO,CAACqB,IAAR,CAAa,MAAb;AACD,KAXH,EAYGJ,OAZH,CAYWrB,KAAK,CAAC0B,QAZjB,EAY2B,CAACT,KAAD,EAAQM,MAAR,KAAmB,CAC1C;AACA;AACD,KAfH,EAgBGF,OAhBH,CAgBWnB,QAAQ,CAACsB,SAhBpB,EAgB+B,CAACP,KAAD,EAAQM,MAAR,KAAmB,CAAE,CAhBpD;AAiBD;;AAzC4B,CAAD,CAA9B,C,CA4CA;;AACA,OAAO,MAAM;AAAEP,EAAAA;AAAF,IAAyBH,UAAU,CAACc,OAA1C;AACP,eAAed,UAAU,CAACe,OAA1B","sourcesContent":["import { createSlice, PayloadAction, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport {\n  login as loginService,\n  register as registerService,\n} from \"@/services/login\";\nimport { User } from \"@/interfaces/login\";\nimport { message } from \"antd\";\nconst NAMESPACE = \"login\";\nconst initialState: User = {\n  username: \"\",\n  password: \"\",\n};\n\nexport const login = createAsyncThunk(\n  `${NAMESPACE}/login`,\n  async (params: User) => {\n    console.log(params);\n    const response = await loginService(params);\n    // console.log(response);\n    return response;\n  }\n);\n\nexport const register = createAsyncThunk(\n  `${NAMESPACE}/register`,\n  async (params: User) => {\n    const response = await registerService(params);\n    return response;\n  }\n);\nconst usersSlice = createSlice({\n  name: NAMESPACE,\n  initialState,\n  reducers: {\n    overrideStateProps(state, { payload }: PayloadAction<User>) {\n      return {\n        ...state,\n        ...payload,\n      };\n    },\n    // getUser: state => {\n    //   state.username = \"admin\";\n    // },\n    // login: (\n    //   state,\n    //   action: PayloadAction<{ name: string; password: string }>\n    // ) => {\n    //   // state.token = \"sdadsadasdasdsa\";\n    //   localStorage.setItem(\"token\", \"\");\n    // },\n    // register: () => {},\n  },\n  // 处理异步请求结果的reducer\n  extraReducers(builder) {\n    builder\n      .addCase(login.pending, (state, action) => {\n        // state.status = 'loading'\n      })\n      .addCase(login.fulfilled, (state, action) => {\n        const { payload } = action;\n        console.log(payload);\n        // state.status = 'succeeded'\n        // // Add any fetched posts to the array\n        // state.posts = state.posts.concat(action.payload)\n        message.info(\"登录成功\");\n      })\n      .addCase(login.rejected, (state, action) => {\n        // state.status = 'failed'\n        // state.error = action.error.message\n      })\n      .addCase(register.fulfilled, (state, action) => {});\n  },\n});\n\n// export const { login, register } = usersSlice.actions;\nexport const { overrideStateProps } = usersSlice.actions;\nexport default usersSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}