{"ast":null,"code":"// 全局管理一个store\nimport { createStore } from \"redux\";\n/**\n * This is a reducer - a function that takes a current state value and an\n * action object describing \"what happened\", and returns a new state value.\n * A reducer's function signature is: (state, action) => newState\n *\n * The Redux state should contain only plain JS objects, arrays, and primitives.\n * The root state value is usually an object.  It's important that you should\n * not mutate the state object, but return a new object if the state changes.\n *\n * You can use any conditional logic you want in a reducer. In this example,\n * we use a switch statement, but it's not required.\n */\n\nfunction counterReducer(state = {\n  value: 0\n}, action) {\n  switch (action.type) {\n    case \"counter/incremented\":\n      return {\n        value: state.value + 1\n      };\n\n    case \"counter/decremented\":\n      return {\n        value: state.value - 1\n      };\n\n    default:\n      return state;\n  }\n} // Create a Redux store holding the state of your app.\n// Its API is { subscribe, dispatch, getState }.\n\n\nconst store = createStore(counterReducer);\nexport default store;","map":{"version":3,"sources":["/Users/renwanjun/Documents/工作/WebProjects/BasicKnowledge/React & Vue/demoes/react-antd-ts/src/store/index.ts"],"names":["createStore","counterReducer","state","value","action","type","store"],"mappings":"AAAA;AACA,SAASA,WAAT,QAA4B,OAA5B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASC,cAAT,CACEC,KAAK,GAAG;AACNC,EAAAA,KAAK,EAAE;AADD,CADV,EAIEC,MAJF,EAKE;AACA,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,qBAAL;AACE,aAAO;AAAEF,QAAAA,KAAK,EAAED,KAAK,CAACC,KAAN,GAAc;AAAvB,OAAP;;AACF,SAAK,qBAAL;AACE,aAAO;AAAEA,QAAAA,KAAK,EAAED,KAAK,CAACC,KAAN,GAAc;AAAvB,OAAP;;AACF;AACE,aAAOD,KAAP;AANJ;AAQD,C,CAED;AACA;;;AACA,MAAMI,KAAK,GAAGN,WAAW,CAACC,cAAD,CAAzB;AACA,eAAeK,KAAf","sourcesContent":["// 全局管理一个store\nimport { createStore } from \"redux\";\n\n/**\n * This is a reducer - a function that takes a current state value and an\n * action object describing \"what happened\", and returns a new state value.\n * A reducer's function signature is: (state, action) => newState\n *\n * The Redux state should contain only plain JS objects, arrays, and primitives.\n * The root state value is usually an object.  It's important that you should\n * not mutate the state object, but return a new object if the state changes.\n *\n * You can use any conditional logic you want in a reducer. In this example,\n * we use a switch statement, but it's not required.\n */\nfunction counterReducer(\n  state = {\n    value: 0,\n  },\n  action: any\n) {\n  switch (action.type) {\n    case \"counter/incremented\":\n      return { value: state.value + 1 };\n    case \"counter/decremented\":\n      return { value: state.value - 1 };\n    default:\n      return state;\n  }\n}\n\n// Create a Redux store holding the state of your app.\n// Its API is { subscribe, dispatch, getState }.\nconst store = createStore(counterReducer);\nexport default store;\n"]},"metadata":{},"sourceType":"module"}