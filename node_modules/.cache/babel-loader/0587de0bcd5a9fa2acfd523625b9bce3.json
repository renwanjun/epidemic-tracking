{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { useHistory } from \"react-router-dom\";\nimport { login as loginService, register as registerService } from \"@/services/user\";\nimport { message } from \"antd\";\nconst NAMESPACE = \"login\";\nconst initialState = {\n  token: \"\",\n  user: \"\",\n  isLogin: false\n};\nconst history = useHistory();\nexport const login = createAsyncThunk(`${NAMESPACE}/login`, async params => {\n  // console.log(params);\n  const response = await loginService(params);\n  return response;\n});\nexport const register = createAsyncThunk(`${NAMESPACE}/register`, async params => {\n  const response = await registerService(params);\n  return response;\n});\nconst usersSlice = createSlice({\n  name: NAMESPACE,\n  initialState,\n  reducers: {\n    overrideStateProps(state, {\n      payload\n    }) {\n      return { ...state,\n        ...payload\n      };\n    } // getUser: state => {\n    //   state.username = \"admin\";\n    // },\n    // login: (\n    //   state,\n    //   action: PayloadAction<{ name: string; password: string }>\n    // ) => {\n    //   // state.token = \"sdadsadasdasdsa\";\n    //   localStorage.setItem(\"token\", \"\");\n    // },\n    // register: () => {},\n\n\n  },\n\n  // 处理异步请求结果的reducer\n  extraReducers(builder) {\n    builder.addCase(login.pending, (state, action) => {// state.status = 'loading'\n    }).addCase(login.fulfilled, (state, action) => {\n      const {\n        payload\n      } = action;\n      const {\n        status,\n        data\n      } = payload;\n\n      if (status == 200) {\n        message.info(\"登录成功\");\n        Object.assign(state, data);\n        localStorage.setItem(\"token\", state.token);\n        state.isLogin = true;\n        history.push(\"/home\");\n      } else {\n        message.error(\"error\");\n      } // console.log(payload);\n      // state.status = 'succeeded'\n      // // Add any fetched posts to the array\n      // state.posts = state.posts.concat(action.payload)\n\n    }).addCase(login.rejected, (state, action) => {// state.status = 'failed'\n      // state.error = action.error.message\n    }).addCase(register.fulfilled, (state, action) => {});\n  }\n\n}); // export const { login, register } = usersSlice.actions;\n\nexport const {\n  overrideStateProps\n} = usersSlice.actions;\nexport default usersSlice.reducer;","map":{"version":3,"sources":["/Users/renwanjun/Documents/工作/WebProjects/BasicKnowledge/React & Vue/demoes/react-antd-ts/src/reducers/login.ts"],"names":["createSlice","createAsyncThunk","useHistory","login","loginService","register","registerService","message","NAMESPACE","initialState","token","user","isLogin","history","params","response","usersSlice","name","reducers","overrideStateProps","state","payload","extraReducers","builder","addCase","pending","action","fulfilled","status","data","info","Object","assign","localStorage","setItem","push","error","rejected","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,EAAqCC,gBAArC,QAA6D,kBAA7D;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SACEC,KAAK,IAAIC,YADX,EAEEC,QAAQ,IAAIC,eAFd,QAGO,iBAHP;AAKA,SAASC,OAAT,QAAwB,MAAxB;AAEA,MAAMC,SAAS,GAAG,OAAlB;AACA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,KAAK,EAAE,EADY;AAEnBC,EAAAA,IAAI,EAAE,EAFa;AAGnBC,EAAAA,OAAO,EAAE;AAHU,CAArB;AAMA,MAAMC,OAAO,GAAGX,UAAU,EAA1B;AACA,OAAO,MAAMC,KAAK,GAAGF,gBAAgB,CAClC,GAAEO,SAAU,QADsB,EAEnC,MAAOM,MAAP,IAAwB;AACtB;AACA,QAAMC,QAAQ,GAAG,MAAMX,YAAY,CAACU,MAAD,CAAnC;AACA,SAAOC,QAAP;AACD,CANkC,CAA9B;AASP,OAAO,MAAMV,QAAQ,GAAGJ,gBAAgB,CACrC,GAAEO,SAAU,WADyB,EAEtC,MAAOM,MAAP,IAAwB;AACtB,QAAMC,QAAQ,GAAG,MAAMT,eAAe,CAACQ,MAAD,CAAtC;AACA,SAAOC,QAAP;AACD,CALqC,CAAjC;AAOP,MAAMC,UAAU,GAAGhB,WAAW,CAAC;AAC7BiB,EAAAA,IAAI,EAAET,SADuB;AAE7BC,EAAAA,YAF6B;AAG7BS,EAAAA,QAAQ,EAAE;AACRC,IAAAA,kBAAkB,CAACC,KAAD,EAAQ;AAAEC,MAAAA;AAAF,KAAR,EAA0C;AAC1D,aAAO,EACL,GAAGD,KADE;AAEL,WAAGC;AAFE,OAAP;AAID,KANO,CAOR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAjBQ,GAHmB;;AAsB7B;AACAC,EAAAA,aAAa,CAACC,OAAD,EAAU;AACrBA,IAAAA,OAAO,CACJC,OADH,CACWrB,KAAK,CAACsB,OADjB,EAC0B,CAACL,KAAD,EAAQM,MAAR,KAAmB,CACzC;AACD,KAHH,EAIGF,OAJH,CAIWrB,KAAK,CAACwB,SAJjB,EAI4B,CAACP,KAAD,EAAQM,MAAR,KAAmB;AAC3C,YAAM;AAAEL,QAAAA;AAAF,UAAcK,MAApB;AACA,YAAM;AAAEE,QAAAA,MAAF;AAAUC,QAAAA;AAAV,UAAmBR,OAAzB;;AACA,UAAIO,MAAM,IAAI,GAAd,EAAmB;AACjBrB,QAAAA,OAAO,CAACuB,IAAR,CAAa,MAAb;AACAC,QAAAA,MAAM,CAACC,MAAP,CAAcZ,KAAd,EAAqBS,IAArB;AACAI,QAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8Bd,KAAK,CAACV,KAApC;AACAU,QAAAA,KAAK,CAACR,OAAN,GAAgB,IAAhB;AACAC,QAAAA,OAAO,CAACsB,IAAR,CAAa,OAAb;AACD,OAND,MAMO;AACL5B,QAAAA,OAAO,CAAC6B,KAAR,CAAc,OAAd;AACD,OAX0C,CAY3C;AACA;AACA;AACA;;AACD,KApBH,EAqBGZ,OArBH,CAqBWrB,KAAK,CAACkC,QArBjB,EAqB2B,CAACjB,KAAD,EAAQM,MAAR,KAAmB,CAC1C;AACA;AACD,KAxBH,EAyBGF,OAzBH,CAyBWnB,QAAQ,CAACsB,SAzBpB,EAyB+B,CAACP,KAAD,EAAQM,MAAR,KAAmB,CAAE,CAzBpD;AA0BD;;AAlD4B,CAAD,CAA9B,C,CAqDA;;AACA,OAAO,MAAM;AAAEP,EAAAA;AAAF,IAAyBH,UAAU,CAACsB,OAA1C;AACP,eAAetB,UAAU,CAACuB,OAA1B","sourcesContent":["import { createSlice, PayloadAction, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { useHistory } from \"react-router-dom\";\nimport {\n  login as loginService,\n  register as registerService,\n} from \"@/services/user\";\nimport { User } from \"@/interfaces/user\";\nimport { message } from \"antd\";\n\nconst NAMESPACE = \"login\";\nconst initialState = {\n  token: \"\",\n  user: \"\",\n  isLogin: false,\n};\n\nconst history = useHistory();\nexport const login = createAsyncThunk(\n  `${NAMESPACE}/login`,\n  async (params: User) => {\n    // console.log(params);\n    const response = await loginService(params);\n    return response;\n  }\n);\n\nexport const register = createAsyncThunk(\n  `${NAMESPACE}/register`,\n  async (params: User) => {\n    const response = await registerService(params);\n    return response;\n  }\n);\nconst usersSlice = createSlice({\n  name: NAMESPACE,\n  initialState,\n  reducers: {\n    overrideStateProps(state, { payload }: PayloadAction<User>) {\n      return {\n        ...state,\n        ...payload,\n      };\n    },\n    // getUser: state => {\n    //   state.username = \"admin\";\n    // },\n    // login: (\n    //   state,\n    //   action: PayloadAction<{ name: string; password: string }>\n    // ) => {\n    //   // state.token = \"sdadsadasdasdsa\";\n    //   localStorage.setItem(\"token\", \"\");\n    // },\n    // register: () => {},\n  },\n  // 处理异步请求结果的reducer\n  extraReducers(builder) {\n    builder\n      .addCase(login.pending, (state, action) => {\n        // state.status = 'loading'\n      })\n      .addCase(login.fulfilled, (state, action) => {\n        const { payload } = action;\n        const { status, data } = payload;\n        if (status == 200) {\n          message.info(\"登录成功\");\n          Object.assign(state, data);\n          localStorage.setItem(\"token\", state.token);\n          state.isLogin = true;\n          history.push(\"/home\");\n        } else {\n          message.error(\"error\");\n        }\n        // console.log(payload);\n        // state.status = 'succeeded'\n        // // Add any fetched posts to the array\n        // state.posts = state.posts.concat(action.payload)\n      })\n      .addCase(login.rejected, (state, action) => {\n        // state.status = 'failed'\n        // state.error = action.error.message\n      })\n      .addCase(register.fulfilled, (state, action) => {});\n  },\n});\n\n// export const { login, register } = usersSlice.actions;\nexport const { overrideStateProps } = usersSlice.actions;\nexport default usersSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}